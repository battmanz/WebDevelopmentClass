
@{
    ViewBag.Title = "Lesson 2";
}

<article>
    <h2>Lesson 2</h2>
    <section>
        <h3>What is CSS?</h3>
        <div>
            <h4>Definition</h4>
            <p>
                <dfn>CSS</dfn> stands for Cascading Style Sheets. CSS allows you to modify how your HTML is displayed. The same HTML can be displayed in an infinte number of ways
                by changing the CSS. The term "Cascading" is used because styles flow or cascade from more general to more specific.
                The most specific rule has the highest priority. We'll see what that means later on.
            </p>

            <p>
                Just like there are different version of HTML, there are different versions of CSS. The latest version of HTML is 5 and the latest version of CSS is 3.
                At the time that I am writing this, neither HTML5 nor CSS3 are official. They are both works in progress. It is entirely
                possible that they may still change before the specs are finalized.
            </p>

            <h4>How do I add CSS to my HTML?</h4>
            <p>
                There are three ways to add CSS to your HTML document. I'll start with the preferred method first.
            </p>
            <p>
                The best way to add CSS to your HTML document
                is to create a separate text file that has an extension of ".css". Lets suppose you named it "styles.css", you could then add it to your HTML document
                by simply adding a <code>&lt;link&gt;</code> element inside the <code>&lt;head&gt;</code> element of your HTML page. The <code>link</code> element
                is self-closing, so it doesn't have any content. You should be sure, however, to set the following attributes: <code>href="styles.css"</code>,
                <code>type="text/css"</code>, and <code>rel="stylesheet"</code>.
            </p>

            <p>Here's how it will look:</p>

            <pre><code class="brush: html;">@(@"
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset=""utf-8"" />
                <title>Your title here</title>
                <link href=""styles.css"" type=""text/css"" rel=""stylesheet"" />
            </head>
            <body>
                <h1>CSS Demo</h1>
            </body>
            </html>
            ")</code></pre>

            <p>
                The second way is to include a <code>&lt;style&gt;</code> element inside the <code>&lt;head&gt;</code> element of your HTML page. Here again, you would add an attribute
                of <code>type="text/css"</code>, but the <code>style</code> element does not have the <code>href</code> or <code>rel</code> attributes. Inside of the <code>style</code> element
                you directly write your styles. This is different from using the <code>link</code> element because using the <code>link</code> element allows you to keep your CSS in a
                completely different file from your HTML.
            </p>

            <p>Here's an example using the <code>style</code> element.</p>

            <pre><code class="brush: html;">@(@"
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset=""utf-8"" />
                <title>Your title here</title>
                <style type=""text/css"">
                    body {
                        background-color: pink;
                    }
                </style>
            </head>
            <body>
                <h1>CSS Demo</h1>
            </body>
            </html>
            ")</code></pre>

            <p>
                The third way to include styles in your HTML is to use the <code>style</code> attribute on any element in the document. This is considered a bad practice and should
                be avoided. You might see this in older pages you visit. In this example, the text color of the first paragraph is set to blue.
            </p>

            <pre><code class="brush: html;">@(@"
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset=""utf-8"" />
                <title>Your title here</title>
            </head>
            <body>
                <h1>CSS Demo</h1>
                <p style=""color: blue;"">I'm feeling blue</p>
                <p>I'm not</p>
            </body>
            </html>
            ")</code></pre>
        </div>
    </section>

    <section>
        <h3>Selectors</h3>
        <div>
            <h4>We are Family</h4>
            <p>
                Relationships exist among elements in an HTML document. You can kind of think of these relationships as a family tree.
            </p>
            <ul>
                <li>An element that contains another is said to be the <dfn>parent</dfn> element (or parent <dfn>node</dfn> - an element can also be referred to as a node).</li>
                <li>The element that is contained by another element is said to be the <dfn>child</dfn> node.</li>
                <li>Two nodes that have the same parent are <dfn>siblings</dfn></li>
                <li>A node whose parent is contained by yet another node is a <dfn>grandchild</dfn> of the parent's parent.</li>
                <li>Likewise, the parent of a parent node, is a <dfn>grandparent</dfn>.</li>
                <li>All nodes contained within a node at any level are <dfn>descendants</dfn> of that node.</li>
                <li>All containing nodes of a node at any level are that nodes <dfn>ancestors</dfn></li>
            </ul>
            <p>
                Let's illustrate with an example. Take, for instance, the HTML document with which we concluded lesson 1:
            </p>

            <pre><code class="brush: html;">@(@"
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset=""utf-8"" />
                <title>Your title here</title>
            </head>
            <body>
                <header>
                    <nav>
                        <ul>
                            <li><a href=""home.html"">Home</a></li>
                            <li><a href=""about.html"">About</a></li>
                            <li><a href=""contact.html"">Contact</a></li>
                        </ul>
                    </nav>
                </header>
                <div id=""content"">
                    <article>
                        <header>
                            <h1>Article 1</h1>
                            <p>lorem ipsum ...</p>
                        </header>
                        <section>
                            <h2>Section 1</h2>
                            <p>...</p>
                        </section>
                        <section>
                            <h2>Section 2</h2>
                            <p>...</p>
                        </section>
                    </article>
                    <article>
                        <h1>Article 2</h1>
                    </article>
                </div>
                <aside>
                </aside>
                <footer>
                </footer>
            </body>
            </html>
            ")</code></pre>

            <p>
                In this document the <code>body</code> is the parent of the <code>header</code>, <code>div</code>, <code>aside</code>, and <code>footer</code>.
                The <code>body</code> is the grandparent of the <code>nav</code> and both <code>article</code> elements. The two <code>article</code> elements
                are siblings as are the two <code>section</code> elements. The <code>header</code> inside of the first <code>article</code> is also a sibling of the two
                <code>section</code> elements.
            </p>
            <p>
                The <code>html</code> node is the ancestor of every other node. There is a special name for such a node, it is called the <dfn>root</dfn> node.
            </p>

            <h4>Using Selectors</h4>
            <p>
                A style sheet consists of one or more <dfn>rules</dfn> that tell the browser how to style your HTML. Each rule consists of a <dfn>selector</dfn> and one or more <dfn>declarations</dfn>.
                The selector tells the browser which elements should have the style applied to them. The declarations are contained within curly braces and give the browser information about how the matches set
                of elements should be displayed. Each declaration has two parts: a property and a value.
            </p>
            <p>
                The following example has two rules. The first rule selects all <code>body</code> elements (there should be only one). It has two declarations that set the background color and the text color.
                The second rule selects all <code>p</code> elements. It has a single declaration that sets the font family, that is, which type of font to use.
            </p>

            <pre><code class="brush: css;">@(@"
            body {
                background-color: black;
                color: white;
            }

            p {
                font-family: Arial;
            }
            ")</code></pre>

            <h4>Types of Selectors</h4>
            <p>
                Now that we know about the relationships among HTML elements and what selectors are used for, let's look at the various types of selectors that exist.
            </p>

            <table id="selectorsTable">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Definition</th>
                        <th>Example</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Universal Selector</td>
                        <td>Selects all elements (period).</td>
                        <td>* { }</td>
                    </tr>
                    <tr>
                        <td>Child Selector</td>
                        <td>Selects immediate children of a parent node. This won't select grandchildren, etc.</td>
                        <td>div > p { }</td>
                    </tr>
                    <tr>
                        <td>Descendant Selector</td>
                        <td>Selects all descendants of a node. This includes grandchildren, great-grandchildren, etc.</td>
                        <td>div p { }</td>
                    </tr>
                    <tr>
                        <td>Adjacent Sibling Selector</td>
                        <td>Selects only the first sibling that immediately follows an element.</td>
                        <td>h1 + p { }</td>
                    </tr>
                    <tr>
                        <td>General Sibling Selector</td>
                        <td>Selects all siblings that follow an element.</td>
                        <td>h1 ~ p { }</td>
                    </tr>
                    <tr>
                        <td>ID Selector</td>
                        <td>Selects the element with the given ID.</td>
                        <td>#myId { }</td>
                    </tr>
                    <tr>
                        <td>Class Selector</td>
                        <td>Selects all elements with the given class name.</td>
                        <td>.myClass { }</td>
                    </tr>
                    <tr>
                        <td>First Line Selector</td>
                        <td>Selects the first line of text within an element.</td>
                        <td>p:first-line { }</td>
                    </tr>
                    <tr>
                        <td>First Letter Selector</td>
                        <td>Selects the first letter within an element.</td>
                        <td>p:first-letter { }</td>
                    </tr>
                    <tr>
                        <td>Unvisited Link Selector</td>
                        <td>Selects links that have <em>not</em> been visited.</td>
                        <td>a:link { }</td>
                    </tr>
                    <tr>
                        <td>Visited Link Selector</td>
                        <td>Selects links that have been visited.</td>
                        <td>a:visited { }</td>
                    </tr>
                    <tr>
                        <td>Hover Selector</td>
                        <td>Selects an element when the mouse is hovering over it.</td>
                        <td>li:hover { }</td>
                    </tr>
                    <tr>
                        <td>Active Selector</td>
                        <td>Selects an element at the time when the user is interacting with it, such as clicking on it.</td>
                        <td>button:active { }</td>
                    </tr>
                    <tr>
                        <td>Focus Selector</td>
                        <td>Selects an element when it has keyboard focus, such as when you use the tab key to move the cursor into a text box.</td>
                        <td>input:focus { }</td>
                    </tr>
                    <tr>
                        <td>Attribute Existance Selector</td>
                        <td>Selects elements that have a particular attribute.</td>
                        <td>p[class]</td>
                    </tr>
                    <tr>
                        <td>Attribute Equality Selector</td>
                        <td>Selects elements whose attribute value equals the given value.</td>
                        <td>p[class="foo"]</td>
                    </tr>
                    <tr>
                        <td>Attribute Contains Word Selector</td>
                        <td>Selects elements whose attribute value is a set of words separated by a space and one of those words matches the given value.</td>
                        <td>p[class~="foo"]</td>
                    </tr>
                    <tr>
                        <td>Attribute Starts With Selector</td>
                        <td>Selects elements whose attribute value starts with the given value.</td>
                        <td>p[class^="foo"]</td>
                    </tr>
                    <tr>
                        <td>Attribute End With Selector</td>
                        <td>Selects elements whose attribute value ends with the given value.</td>
                        <td>p[class$="foo"]</td>
                    </tr>
                    <tr>
                        <td>Attribute Contains Selector</td>
                        <td>Selects elements whose attribute value contains the given text (anywhere - could be in the middle, start, or end).</td>
                        <td>p[class*="foo"]</td>
                    </tr>
                </tbody>
            </table>

            <p>
                You can even combine selectors. For example if you want to style all p elements with a class of "foo" that are focused, you would write
                the selector like so: <code>p.foo:focused { }</code>. You can also combine two or more selectors with a comma. This allows you to apply some rule to
                two completely different sets of elements. For example, <code>section > h1, p.foo { }</code> would apply to both an <code>h1</code>
                that is an immediate child of a <code>section</code> element <em>and</em> all <code>p</code> elements with a class of "foo".
            </p>
        </div>
    </section>

    <section>
        <h3>Colors</h3>
        <div>
            <h4>How to Represent Colors</h4>
            <p>
                You might have heard that the primary colors are red, yellow, and blue, but with light that is not true. The primary colors are actually
                red, green, and blue. When these three colors are combined, they make white light. This is just a natural property of light.
                See <a href="http://en.wikipedia.org/wiki/RGB_color_model">http://en.wikipedia.org/wiki/RGB_color_model</a>.
            </p>
            <p>
                In CSS, one way to specify a color is to specify how much red, how much green, and how much blue the pixel(s) should have. This is done by
                expressing a value like so: <code>rgb(100, 100, 90)</code>, where <code>rgb</code> stands for red, green, blue. The values
                can range from 0 to 255. That makes 256 (including 0) possible values per color component. This number happens to fit into a computer byte.
                The number of possible colors that can be specified in this way is 256 * 256 * 256 = 16777216.
            </p>
            <p>
                Another equivalent way to specify a color (and this is perhaps the most common) is to specify the rgb values as a hexidecimal value.
                An example looks like this <code>#ee3e80</code>. The first two characters, in this case <code>ee</code>, specify the red component.
                The next two (<code>3e</code>) specify the green and the last two (<code>80</code>) the blue. Hexidecimal is another numbering system
                often used in computers. If you're interested, you can read more on <a href="http://en.wikipedia.org/wiki/Hexadecimal">wikipedia</a>.
            </p>
            <p>
                Another way to specify a color is to use a color name. This method is limiting, however, because there are only 147 colors with defined names.
                You can see a visual depiction of all 147 colors <a href="http://www.colors.commutercreative.com/grid/" target="_blank">here</a>.
            </p>

            <h4>Foreground Color</h4>
            <p>
                You set the foreground color using the <code>color</code> property. The following three rules are all equivalent:
            </p>

            <pre><code class="brush: css;">@(@"
            p.one {
                color: rgb(220, 20, 60);
            }
            p.two {
                color: #DC143C;
            }
            p.three {
                color: Crimson;
            }
            ")</code></pre>

            <h4>Background Color</h4>
            <p>
                You set the background color using the <code>background-color</code> property. Here is an example that sets both the
                foreground and background colors on several elements:
            </p>

            <pre><code class="brush: css;">@(@"
            section {
                background-color: LightSlateGray;
            }
            
            h1 {
                color: #FFFAFA;
                background-color: #BA55D3;
            }

            p {
                background-color: Teal;
                color: #FFFAFA;
            }
            ")</code></pre>

            <pre><code class="brush: html;">@(@"
            <section>
                <h1>Background Demo</h1>
                <p>This is a paragraph</p>
            </section>
            ")</code></pre>

            <p>Result</p>

            <section id="colorDemo">
                <h1>Background Demo</h1>
                <p>This is a paragraph</p>
            </section>

            <h4>Opacity</h4>

            <p>
                New in CSS3 is the ability to make elements semi-transparent. This can lead to some very cool designs.
                There are two ways to make an element transparent, you can use the <code>opacity</code> property or you can use
                the <code>rgba</code> property.
            </p>

            <p>
                The <code>opacity</code> property takes a number anywhere from 0.0 to 1.0. Zero (0.0) means fully transparent. One (1.0) means fully
                opaque. A value of 0.5 means that the element is 50% transparent. Here's a demo that illustrates the <code>opacity</code> property.
            </p>

            <pre><code class="brush: css;">@(@"
            div {
                background-color: lightblue;
            }

            p {
                background-color: pink;
            }

            p.opaque {
                opacity: 1;
            }

            p.opacity75 {
                opacity: 0.75;
            }

            p.opacity50 {
                opacity: 0.5;
            }

            p.opacity25 {
                opacity: 0.25;
            }

            p.transparent {
                opacity: 0;
            }
            ")</code></pre>

            <pre><code class="brush: html;">@(@"
            <div>
                <p class=""opaque"">Fully Opaque</p>
                <p class=""opacity75"">75% Opaque / 25% Transparent</p>
                <p class=""opacity50"">50% Opaque / 50% Transparent</p>
                <p class=""opacity25"">25% Opaque / 75% Transparent</p>
                <p class=""transparent"">Fully Transparent</p>
            </div>
            ")</code></pre>

            <div id="opacityDemo">
                <p class="opaque">Fully Opaque</p>
                <p class="opacity75">75% Opaque / 25% Transparent</p>
                <p class="opacity50">50% Opaque / 50% Transparent</p>
                <p class="opacity25">25% Opaque / 75% Transparent</p>
                <p class="transparent">Fully Transparent</p>
            </div>

            <h4>rgba</h4>

            <p>
                The <code>rgba</code> property is very similar to the <code>rgb</code> property, but in addition to the
                red, green, and blue components you can also specify an <dfn>alpha</dfn> value. The alpha value is very similar
                to the <code>opacity</code> property. There is a slight difference, though. If you noticed in that previous example,
                the text inside of each <code>div</code> also became transparent. With <code>rgba</code>, the content does not become
                transparent. Compare this with the previous example:
            </p>

            <pre><code class="brush: css;">@(@"
            div {
                background-color: lightblue;
            }

            p.opaque {
                background-color: rgba(255, 192, 203, 1);
            }

            p.opacity75 {
                background-color: rgba(255, 192, 203, 0.75);
            }

            p.opacity50 {
                background-color: rgba(255, 192, 203, 0.50);
            }

            p.opacity25 {
                background-color: rgba(255, 192, 203, 0.25);
            }

            p.transparent {
                background-color: rgba(255, 192, 203, 0);
            }
            ")</code></pre>

            <pre><code class="brush: html;">@(@"
            <div>
                <p class=""opaque"">Fully Opaque</p>
                <p class=""opacity75"">75% Opaque / 25% Transparent</p>
                <p class=""opacity50"">50% Opaque / 50% Transparent</p>
                <p class=""opacity25"">25% Opaque / 75% Transparent</p>
                <p class=""transparent"">Fully Transparent</p>
            </div>
            ")</code></pre>

            <div id="rgbaDemo">
                <p class="opaque">Fully Opaque</p>
                <p class="opacity75">75% Opaque / 25% Transparent</p>
                <p class="opacity50">50% Opaque / 50% Transparent</p>
                <p class="opacity25">25% Opaque / 75% Transparent</p>
                <p class="transparent">Fully Transparent</p>
            </div>
        </div>
    </section>

    <section>
        <h3>Text</h3>
        <div>
            <h4>Font Family</h4>
            <p>
                You can set the typeface (type of font) for your site by using the <code>font-family</code> CSS property.
                It's <em>very</em> important to note that the computer viewing your website must have that font installed in order to use it.
                The <code>font-family</code> property allows you to specify multiple values. The additional values are like backup plans. If the
                user's computer doesn't have the first font, then it will try to use the next, otherwise the third, etc. Here's an example:
            </p>

            <pre><code class="brush: css;">@(@"
            body {
                font-family: Times, Georgia, serif;
            }
            ")</code></pre>

            <p>
                In that last example, the "Times" font family would be used first. If the computer didn't have it installed, then "Georgia" would be used. The last value
                "serif" is actually not a specific font, but rather a category of fonts. The term that is used is "generic font family". It's always best to put a generic
                font family as your last resort. There are five categories that browsers are expected to support:
            </p>
            <dl>
                <dt>serif</dt>
                <dd>Serif fonts have little hooks or tails, known as serifs, on the ends of letters.</dd>

                <dt>sans-serif</dt>
                <dd>"Sans" means without, so sans-serif fonts do not have serifs.</dd>

                <dt>monospace</dt>
                <dd>In a monospace font, each letter has the exact same width. This is not true of other fonts.</dd>

                <dt>cursive</dt>
                <dd>Cursive fonts generally have connected letters and look, well, cursive.</dd>

                <dt>fantasy</dt>
                <dd>Fantasy fonts are decorative fonts used for titles. They should not be used for long bodies of text.</dd>
            </dl>

            <pre><code class="brush: css;">@(@"
            p.serif {
                font-family: Georgia, Times, serif;
            }

            p.sans {
                font-family: Arial, Verdana, sans-serif;
            }

            p.mono {
                font-family: Courier, ""Courier New"", monospace;
            }

            p.cursive {
                font-family: ""Comic Sans MS"", ""Monotype Corsiva"", cursive;
            }

            p.fantasy {
                font-family: Impact, Haettenschweiler, fantasy;
            }
            ")</code></pre>

            <pre><code class="brush: html;">@(@"
                <p class=""serif"">The quick brown fox jumps over the lazy dog</p>
                <p class=""sans"">The quick brown fox jumps over the lazy dog</p>
                <p class=""mono"">The quick brown fox jumps over the lazy dog</p>
                <p class=""cursive"">The quick brown fox jumps over the lazy dog</p>
                <p class=""fantasy"">The quick brown fox jumps over the lazy dog</p>
            ")</code></pre>

            <div id="fontDemo">
                <p class="serif">The quick brown fox jumps over the lazy dog</p>
                <p class="sans">The quick brown fox jumps over the lazy dog</p>
                <p class="mono">The quick brown fox jumps over the lazy dog</p>
                <p class="cursive">The quick brown fox jumps over the lazy dog</p>
                <p class="fantasy">The quick brown fox jumps over the lazy dog</p>
            </div>

            <h4>Font Size</h4>
            <p>
                The size of the font is specified in CSS using the <code>font-size-</code> property. There are different types of units
                with which the font size can be specified. The four commonly-used units are pixels (<code>px</code>), percentage, ems (<code>em</code>), or points (<code>pt</code>).
                Points (<code>pt</code>) should only be used when designing styles for print (which you can do with CSS, by the way). That leaves us with three
                other systems of measurement to talk about.
            </p>
            <p>
                Pixels are the small dots that make up your computer screen. Specifying the font size in pixels is the best way to ensure that your text will look
                how you designed it. You can make your screen "pixel perfect". However, there is a drawback to this approach. Most browsers allow the user to select
                how big text should be by default. Using pixels isn't very flexible with different user settings.
            </p>
            <p>
                1 <code>em</code> is equal to the current font size. So an <code>em</code> is a relative measurement, that is, it's relative to the current
                font size. As the font size increases, so does an em.
            </p>
            <p>
                A percentage is very similar to an em. It is also a relative unit that will increase as the font size increases. There has been much debate and discussion
                over which to use for the web. It appears that the current accepted philosophy is to specify the font size of the <code>&lt;body&gt;</code> element
                using a percent and then specify the font size of other elements using the <code>em</code> units. The reason is that a web page needs to look good on many
                devices with differing screen sizes and resolutions. Using a relative unit (such as <code>em</code> or <code>%</code>) allows the document to resize in proportion to the screen.
                See <a href="http://kyleschaeffer.com/development/css-font-size-em-vs-px-vs-pt-vs/" target="_blank">http://kyleschaeffer.com/development/css-font-size-em-vs-px-vs-pt-vs/</a> for example.
            </p>

            <p>
                Web designers tend to prefer <code>ems</code> or a % over <code>px</code>. The reason is that a web page needs to look good on many devices with differing
                screen sizes and resolutions. Using a relative unit (such as <code>em</code> or <code>%</code>) allows the document to resize in proportion to the screen.
                A great article that explains this in depth can be found here: <a href="http://kyleschaeffer.com/development/css-font-size-em-vs-px-vs-pt-vs/">http://kyleschaeffer.com/development/css-font-size-em-vs-px-vs-pt-vs/</a>.
            </p>

            <pre><code class="brush: css;">@(@"
            body {
                font-size: 100%;
            }

            p {
                font-size: 0.75em;
            }
            ")</code></pre>

            <h4>Bold, Italic, Oblique</h4>

            <p>
                The <code>font-weight</code> property is used to make text bold or, on the other hand, make text <em>not</em> bold. This property has two possible
                values, <code>normal</code> or <code>bold</code>.
            </p>
            <p>
                The <code>font-style</code> property has three values, <code>normal</code>, <code>italic</code>, or <code>oblique</code>. Though they may look quite
                similar italic and oblique font are (supposed to be) different. Italicized text is cursive as in calligraphic handwriting. Oblique text is simply text
                that is on a slant. Though the two are different, many fonts don't have an italic version. In that case the browser just makes the text slanted which
                ends up making italic and oblique text look the same.
            </p>

            <h4>Text Transform</h4>
            <p>
                The <code>text-transform</code> property can have one of three values:
            </p>
            
            <ul>
                <li><code>uppercase</code></li>
                <li><code>lowercase</code></li>
                <li><code>capitalize</code></li>
            </ul>
            
            <p>
                As you could probably guess, <code>uppercase</code> makes the text appear as all uppercase letters, <code>lowercase</code> makes the text appear
                as all lowercase letters, and <code>capitalize</code> makes only the first letter of each word uppercase.
            </p>

            <h4>Text Decoration</h4>
            <p>
                The <code>text-decoration</code> property allows you to add or remove a decoration from text. For example, most browsers display links with an underline.
                You could, however, remove that underline by setting the <code>text-decoration</code> property to <code>none</code>. The four possible values are
                <code>none</code>, <code>underline</code>, <code>overline</code>, and <code>line-through</code>. <code>line-through</code> is a horizontal line 
                through the <span class="line-through">center of the text</span>.
            </p>

            <pre><code class="brush: css;">@(@"
            a.no-decoration {
                text-decoration: none;
            }
            ")</code></pre>
            
            <pre><code class="brush: html;">@(@"
                <div><a href=""#"">Standard link</a></div>
                <div><a href=""#"" class=""no-decoration"">Link with no underline</a></div>
            ")</code></pre>

            <div><a href="#">Standard link</a></div>
            <div><a href="#" class="no-decoration">Link with no underline</a></div>

            <h4>Line Height</h4>
            <p>
                The <code>line-height</code> property tells the browser how tall a line of text should be.
                The line height equals the font-size plus the amount of space between lines. Increasing the 
                line hight doesn't change the font size, so it has the effect of putting more space between lines.
            </p>
            
            <h4>Letter Spacing and Word Spacing</h4>
            <p>
                As the names imply, <code>letter-spacing</code> sets the amount of space between letters and <code>word-spacing</code> set the amount
                of space between words. It is a good practice to specify the value for either of these properties in terms of <code>ems</code>, because
                <code>ems</code> are proportional to the font size.
            </p>

            <h4>Text Align</h4>
            <p>
                The <code>text-align</code> property take have one of four values: <code>left</code>, <code>right</code>, <code>center</code>, or <code>justify</code>.
                Anyone who has used Microsoft Word or other word processing software will be quite familiar with these options.
                <strong>Text that is left aligned is considered easiest to read.</strong>
            </p>

            <h4>Vertical Alignment</h4>
            <p>
                The <code>vertical-align</code> property has two separate usages. First it can be used to vertically align the content of <strong>inline elements
                and inline elements only. Don't try to use it on block level elements. It won't work! </strong> I know you're going to forget this, and try to use
                it, so I'll repeat it again. It does not work on block elements. This property can accept one of the following values:
            </p>

            <ul>
                <li><code>baselline</code></li>
                <li><code>sub</code></li>
                <li><code>super</code></li>
                <li><code>top</code></li>
                <li><code>text-top</code></li>
                <li><code>middle</code></li>
                <li><code>bottom</code></li>
                <li><code>text-bottom</code></li>
            </ul>

            <p>
                In addition to the values above, it can also accept a length in <code>px</code>, <code>em</code>, or <code>%</code> of the line height.
            </p>

            <p>
                The other use for the <code>vertical-align</code> property is to vertically align content within a table cell (either a <code>&lt;td&gt;</code> or <code>&lt;th&gt;</code>).
                Note that these are block elements. Table cells are the one exception to the rule that <code>vertical-align</code> does not work on block elements.
                The only relevant values for table cells are <code>baseline</code>, <code>top</code>, <code>middle</code>, and <code>bottom</code>.
                See the following example.
            </p>

            <pre><code class="brush: css;">@(@"
            .baseline {
                vertical-align: baseline;
            }

            .sub {
                vertical-align: sub;
            }

            .super {
                vertical-align: super;
            }

            .top {
                vertical-align: top;
            }

            .text-top {
                vertical-align: text-top;
            }

            .middle {
                vertical-align: middle;
            }

            .bottom {
                vertical-align: bottom;
            }

            .text-bottom {
                vertical-align: text-bottom;
            }
            ")</code></pre>

            <pre><code class="brush: html;">@(@"
                <p>
                    <span class=""bottom"">bottom</span>
                    <span class=""text-top"">text-top</span>
                    <span class=""sub"">sub</span>
                    <span class=""middle"">middle</span>
                    <span class=""baseline"">baseline</span>
                    <span class=""super"">super</span>
                    <span class=""text-bottom"">text-bottom</span>
                    <span class=""top"">top</span>
                </p>

                <table>
                    <tr>
                        <td class=""baseline"">baseline</td>
                        <td class=""top"">top</td>
                        <td class=""middle"">middle</td>
                        <td class=""bottom"">bottom</td>
                    </tr>
                </table>
            ")</code></pre>

            <div id="verticalAlignDemo">
                <p>
                    <span class="bottom">bottom</span>
                    <span class="text-top">text-top</span>
                    <span class="sub">sub</span>
                    <span class="middle">middle</span>
                    <span class="baseline">baseline</span>
                    <span class="super">super</span>
                    <span class="text-bottom">text-bottom</span>
                    <span class="top">top</span>
                </p>

                <table>
                    <tr>
                        <td class="baseline">baseline</td>
                        <td class="top">top</td>
                        <td class="middle">middle</td>
                        <td class="bottom">bottom</td>
                    </tr>
                </table>
            </div>

            <p>A great article that explains the <code>vertical-align</code> property really well is found here: <a href="http://phrogz.net/CSS/vertical-align/">http://phrogz.net/CSS/vertical-align/</a></p>

            <h4>Text Indent</h4>
            <p>
                The <code>text-indent</code> property indents the first line of text by a given amount (e.g. <code>text-indent: 1em;</code>).
                In addition to the obvious use of indenting the first line of paragraphs, the <code>text-indent</code> property has found another surprising use.
                It can be used to move text far off the screen so it can't be seen. Let me explain.
            </p>
            <p>
                Some websites will add a heading with some text and then, using CSS, will push the text off the screen while at the same time displaying a background image in place of the text.
                This technique allows the designer to show a more decorative heading than just text alone. So why have the text at all? The reason is that screen readers can't
                read images, so having the text is good for accessibility. The other reason is that it's good for Search Engine Optimization (<a href="http://en.wikipedia.org/wiki/Search_engine_optimization"><abbr>SEO</abbr></a>).

                @*Let me explain. It is often desirable to show your company logo at the top of your page, however, the bots used by Google and other search engines
                can't read images. So if you would like to have your site optimized for search engines (<a href="http://en.wikipedia.org/wiki/Search_engine_optimization">SEO</a>),
                then you need to have your company name as text on your webpage. So what's often done is that you might have an <code>&lt;h1&gt;</code> on the page with your
                company name and then you use a large negative text indent (such as <code>-9999px</code>) to push the text far off the screen while at the same time displaying
                your logo as a background image.*@
            </p>

            <pre><code class="brush: css;">@(@"
            #home {
                text-indent: -9999px;
                background-image: url(~/Images/homeReplacement.png);
            }
            ")</code></pre>

            <pre><code class="brush: html;">@(@"
                <h1 id=""home"">Home</h1>
            ")</code></pre>

            <h1 id="home">Home</h1>

            <h4>Text Shadow</h4>
            <p>
                A new feature added in CSS3 is the ability to add a shadow to text. This is done using the <code>text-shadow</code> property. The <code>text-shadow</code> property
                accepts four values:
            </p>

            <dl>
                <dt>horizontal offset</dt>
                <dd>
                    specifies how far to the left or right the shadow should be displayed. A negative value will cause the shadow to be displayed to the left and a positive value
                    will cause the shadow to be diplayed to the right of the text.
                </dd>

                <dt>vertical offset</dt>
                <dd>
                    specifies how far above or below the shadow should be displayed. Negative values cause the shadow to be displayed above and positive values cause the shadow to be
                    displayed below the text.
                </dd>

                <dt>blur radius</dt>
                <dd>
                    specifies how wide the shadow should be. The higher the number, the wider and lighter the shadow will be (i.e. it will be more spread out).
                </dd>

                <dt>color</dt>
                <dd>Any CSS color is allowed (i.e. it doesn't have to be black or gray)</dd>
            </dl>

            <p>
                A neat example of using the <code>text-shadow</code> property can be found on the <a href="http://browsehappy.com/">Browse Happy</a> website. Notice how the word "Browse" seems to sink into the page
                and the word "Happy" seems to pop out. That website also demonstrates the fact that you can place multiple shadows on the text. Just separate each shadow by a comma.
            </p>
        </div>
    </section>

    <section>
        <h3>Boxes</h3>
        <div>
            <h4>Width and Height</h4>
            <p>

            </p>
        </div>
    </section>
</article>

@section scripts {
    <script>
        $(function () {
            $("article").accordion({
                header: "h3",
                heightStyle: "content",
                collapsible: true,
                active: false
            });

            $("#showGif").click(function () {
                $("#fatSpiderMan").show();
            });

            $("#hideGif").click(function () {
                $("#fatSpiderMan").hide();
            });
        });
    </script>
    <script>
        SyntaxHighlighter.config.tagName = "code";
        SyntaxHighlighter.defaults["toolbar"] = false;
        SyntaxHighlighter.all();
    </script>
}
