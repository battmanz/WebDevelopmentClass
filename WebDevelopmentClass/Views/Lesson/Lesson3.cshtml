
@{
    ViewBag.Title = "Lesson 3";
}

<article>
    <h2>Lesson 3</h2>
    <section>
        <h3>Source Control</h3>
        <div>
            <h4>Defined</h4>
            <p>
                <dfn>Source control</dfn> (also known as <a href="http://en.wikipedia.org/wiki/Revision_control">revision control</a>) is a system that manages the changes
                made to your source code. Each <dfn>revision</dfn> (an independent set of files checked in at once) gets assigned a number for tracking purposes. By tracking
                the revisions, a source control system allows you to revert (or go back) to a previous revision.
            </p>
            <p>
                When multiple developers are working on the same project, it is crucial to have a source control system in place. This ensures that if two developers work
                on the same file, that possible conflicts are detected and merged correctly.
            </p>

            <h4>Git</h4>
            <p>
                <dfn><a href="http://en.wikipedia.org/wiki/Git_(software)">Git</a></dfn> is a popular distributed revision control system. <dfn>Distributed</dfn> means
                that all developers working on a project don't have to have a connection to a common network.
            </p>

            <h4>Github</h4>
            <p>
                <q cite="http://en.wikipedia.org/wiki/GitHub"><a href="http://en.wikipedia.org/wiki/GitHub">GitHub</a> is a web-based hosting service for software development projects that uses the Git revision control system.</q>
                What that means is that you can upload your code to the Github website and then access it from any computer connected to the internet. And the best part is that it's free!
                Free, provided that your code is public, meaning anyone can view it. If your code is private, then you must pay.
            </p>
            <p>
                To register, go to <a href="https://github.com/">https://github.com/</a>, choose a user name, enter your email, and then choose a password.
                Once you're logged in, you can create a new repository by clicking on the green button on the right hand side of the screen.
            </p>

            <img src="~/Images/githubNewRepo.png" alt="Github new repository" />

            <p>
                In addition to the web interface, you can also use the github client, which is a program that is installed on your computer.
                To download it, follow this link: <a href="http://windows.github.com/">Github client</a> and then click the big green button.
            </p>

            <img src="~/Images/githubClientDownloadButton.png" alt="Github Client Download Button" />

            <p>
                Make sure to click on the executable that shows up at the bottom of the screen (at least in Chrome).
            </p>

            <img src="~/Images/githubClientExe.png" alt="Github Client executable" />

            <p>
                Once you have it installed, log in and then you can create a repository from within the Github client application.
            </p>

            <img src="~/Images/githubClientCreateRepo.png" alt="Github Client Create Repo" />

            <p>
                Now that you have a repository set up. It's time to start using it. By default Github will create a folder for your new repository
                inside of a <code>Github</code> folder inside of the <code>Documents</code> folder. For example, if you repository is named "MyCoolWebsite", then the code
                should be placed inside of the <code>\Documents\GitHub\MyCoolWebsite</code> folder. The Github client will automatically detect any
                changes inside of this folder and prompt you to commit them to the server.
            </p>

            <img src="~/Images/githubClientCommitChanges.png" alt="Github Client Commit Changes" />

            <p>
                After you have committed your changes, then you need to sync them to the server. Note that the first time you commit, instead of saying
                "sync" it will instead say "publish".
            </p>

            <img src="~/Images/githubClientSync.png" alt="Github Client Sync Changes" />
        </div>
    </section>

    <section>
        <h3>Website Mock-up</h3>
        <div>
            <h4>Home Page</h4>
            <p>
                It's time to get started on our class project. We are going to build a website for a fictional bookstore.
                Well start with the home page. Here is a mock-up, designed in photoshop, of what it should look like.
                Keep in mind that this is only a picture. We actually need to build it now.
            </p>

            <img id="homePageMockup" src="~/Images/ficticiousBookstoreMockUp.jpg" alt="Ficticious Bookstore Home Page mockup" width="880" />

            <h4>About Page</h4>
            <img src="~/Images/ficticiousAboutMockUp.jpg" alt="Ficticious Bookstore About Page Mockup" width="880" />

            <h4>Contact Page</h4>
            <img src="~/Images/ficticiousContactMockUp.jpg" alt="Ficticious Bookstore Contact Page Mockup" width="880" />
        </div>
    </section>

    <section>
        <h3>Object Oriented Programming</h3>
        <div>
            <h4>Built-in Types</h4>
            <p>
                C# has the following built-in data types:
            </p>
            <dl>
                <dt><code>bool</code></dt>
                <dd>
                    It can have only one of two values: <code>true</code> or <code>false</code>

                    <pre><code class="brush: csharp;">@(@"
                    bool x = true;
                    ")</code></pre>
                </dd>

                <dt><code>byte</code></dt>
                <dd>
                    It can store an integer between 0 and 255.
                
                    <pre><code class="brush: csharp;">@(@"
                    byte x = 255;
                    ")</code></pre>
                </dd>

                <dt><code>sbyte</code></dt>
                <dd>
                    The <code>s</code> stands for "signed". Signed means that it can be negative or positive.
                    It can store an integer between -128 and 127.

                    <pre><code class="brush: csharp;">@(@"
                    sbyte x = -5;
                    ")</code></pre>
                </dd>

                <dt><code>char</code></dt>
                <dd>
                    This can store a single character such as 'a', 'b', '1', '2', etc.

                    <pre><code class="brush: csharp;">@(@"
                    char x = 'A';
                    ")</code></pre>
                </dd>

                <dt><code>decimal</code></dt>
                <dd>
                    This stores a base 10 number. Use this for monetary values.
                    You must add <code>M</code> to the end of the number to signify that it's a decimal.

                    <pre><code class="brush: csharp;">@(@"
                    decimal x = 100.50M;
                    ")</code></pre>
                </dd>

                <dt><code>double</code></dt>
                <dd>
                    This stores a floating point number with "double" precision.
                    It's approximate range is from ±5.0 × 10<sup>−324</sup> to ±1.7 × 10<sup>308</sup>.

                    <pre><code class="brush: csharp;">@(@"
                    double x = 100.50;
                    ")</code></pre>
                </dd>

                <dt><code>float</code></dt>
                <dd>
                    This stores a floating point number with "single" precision.
                    It's approximate range is from -3.4 × 10<sup>38</sup> to +3.4 × 10<sup>38</sup>.
                    You must add <code>F</code> to the end of the number to signify that it's a float.

                    <pre><code class="brush: csharp;">@(@"
                    float x = 100.50F;
                    ")</code></pre>
                </dd>

                <dt><code>int</code></dt>
                <dd>
                    This stores an integer value (e.g. -1, -2, 0, 1, 2).

                    <pre><code class="brush: csharp;">@(@"
                    int x = -3;
                    ")</code></pre>
                </dd>

                <dt><code>uint</code></dt>
                <dd>
                    This stores an "unsigned" integer value, that is, not negative (e.g. 0, 1, 2, etc).
                    
                    <pre><code class="brush: csharp;">@(@"
                    uint x = 10;
                    ")</code></pre>
                </dd>

                <dt><code>long</code></dt>
                <dd>
                    This stores an integer with a larger range than an int.
                    
                    <pre><code class="brush: csharp;">@(@"
                    long x = 4294967296;
                    ")</code></pre>
                </dd>

                <dt><code>ulong</code></dt>
                <dd>
                    This stores an "unsigned" integer with a large range.
                
                    <pre><code class="brush: csharp;">@(@"
                    ulong x = 4294967296;
                    ")</code></pre>
                </dd>

                <dt><code>object</code></dt>
                <dd>
                    This is the most general type. Any other type can be assigned to a variable of type object.
                
                    <pre><code class="brush: csharp;">@(@"
                    object x1 = 123;
                    object x2 = 'B';
                    object x3 = 123.45;
                    object x4 = ""hello world"";
                    object x5 = false;
                    ")</code></pre>
                </dd>

                <dt><code>short</code></dt>
                <dd>
                    A signed integer with a smaller range than an int.
                
                    <pre><code class="brush: csharp;">@(@"
                    short x = -100;
                    ")</code></pre>
                </dd>

                <dt><code>ushort</code></dt>
                <dd>
                    An unsigned integer with a range smaller than a uint.
                
                    <pre><code class="brush: csharp;">@(@"
                    ushort x = 100;
                    ")</code></pre>
                </dd>

                <dt><code>string</code></dt>
                <dd>
                    This can store many characters (i.e. a string of characters).
                
                    <pre><code class="brush: csharp;">@(@"
                    string x = ""I'm a string"";
                    ")</code></pre>
                </dd>
            </dl>

            <h4>Classes</h4>
            <p>
                As a programmer you can create your own custom types. You do this by creating a class. A class is built using the built-in
                types as the building blocks. For example if you wanted to have a Person type, you could it like so:
            </p>

            <pre><code class="brush: csharp;">@(@"
            public class Person
            {

                public Person(string firstName, string lastName, boolean isMale, decimal accountBalance, int age)
                {
                    FirstName = firstName;
                    LastName = lastName;
                    IsMale = isMale;
                    AccountBalance = accountBalance;
                    Age = age;                
                }

                public string FirstName { get; set; }
                public string LastName { get; set; }
                public boolean IsMale { get; set; }
                public decimal AccountBalance { get; set;}
                public int Age { get; set; }
            }
            ")</code></pre>

            <p>
                The <code>{ get; set; }</code> is C#'s way of saying that you can write to and read from this property.
                It is possible to have a property that you can only read (and not write) or only write (and not read).
                I won't give examples of those here, because it is beyond the scope of this class.
            </p>

            <p>
                The code that looks like this:
            </p>

            <pre><code class="brush: csharp;">@(@"
            public Person(string firstName, string lastName, boolean isMale, decimal accountBalance, int age)
            {
                FirstName = firstName;
                LastName = lastName;
                IsMale = isMale;
                AccountBalance = accountBalance;
                Age = age;                
            }
            ")</code></pre>

            <p>
                is called a constructor. A <dfn>constructor</dfn> is a function that creates a new Person object using the data given to it.
                You can create different Persons by passing in different data to the constructor.
                In order to create a new Person you use the <code>new</code> operator like so:
            </p>

            <pre><code class="brush: csharp;">@(@"
            Person joe = new Person(""Joe"", ""Cool"", true, ""1.09"", ""22"");

            Person mary = new Person(""Mary"", ""Smith"", false, ""300000.99"", ""35"");
            ")</code></pre>

            <h4>ViewModels</h4>
            <p>
                We model the real world using classes. Sometimes we will create a model that is specific to a particular view. In that case
                we refer to that model as a viewmodel (i.e. a model for the view or the view's model).
            </p>

            <p>
                Let's create a viewmodel for the contact page as follows. Create a new class inside of the "Models" folder.
            </p>

            <pre><code class="brush: csharp;">@(@"
            public class ContactViewModel
            {
                [Required]
                [Display(Name = ""First Name"")]
                public string FirstName { get; set; }
        
                [Required]
                [Display(Name = ""Last Name"")]
                public string LastName { get; set; }

                [Required]
                [EmailAddress]
                public string Email { get; set; }

                [Required]
                [StringLength(100)]
                public string Subject { get; set; }

                [Required]
                [StringLength(800)]
                [DataType(DataType.MultilineText)]
                public string Message { get; set; }
            }
            ")</code></pre>

            <p>
                You'll notice that the properties of this viewmodel are "decorated" with attributes (for example <code>[Required]</code>).
                These attribute give additional information to ASP.NET about the property such as if it is mandatory to fill it in,
                the maxinum number of characters allowed, or if it's an email, etc.
            </p>

            <p>
                Now add this code to the "HomeController":
            </p>

            <pre><code class="brush: csharp;">@(@"
            [HttpPost]
            [ValidateAntiForgeryToken]
            public ActionResult Contact(ContactViewModel model)
            {
                if (ModelState.IsValid)
                {
                    var fromAddress = ""ficticiousbooksellers@gmail.com"";

                    using (var smtp = new SmtpClient
                    {
                        Host = ""smtp.gmail.com"",
                        Port = 587,
                        EnableSsl = true,
                        DeliveryMethod = SmtpDeliveryMethod.Network,
                        UseDefaultCredentials = false,
                        Credentials = new NetworkCredential(fromAddress, ""fiction1234"")
                    })
                    {
                        using (var message = new MailMessage(fromAddress, fromAddress)
                            {
                                Subject = model.Subject,
                                Body = model.Email + "" sent you the following message:\n\n"" + model.Message
                            })
                        {
                            smtp.Send(message);
                        }
                    }
                    return RedirectToAction(""Index"");
                }
                return View(model);
            }
            ")</code></pre>

            <p>
                You'll probably want to use a different email address and password. I just went to gmail.com and created a new account to use
                for demonstration purposes. You could do the same. Normally you would not type the password into your code as I have done.
                Instead you would encrypt it.
            </p>

            <p>
                What this code does is programmatically send an email using gmail as your smtp server. If you sign up for a paid hosting account
                normally this would include an email account. You can configure this code to use the smtp server of your hosting provider.
            </p>

            <h4>Adding a View</h4>
            <p>
                Visual Studio can help you create a view for your model. To do so, right click on the code we just added above inside the HomeController.
                This will display a context menu. Click on the item that says "Add View...".
            </p>

            <img src="~/Images/addView.png" alt="Add View" width="712" />

            <p>
                In the dialog that pops up choose "Create" as the template and "ContactViewModel" as the model class.
            </p>

            <img src="~/Images/addViewDialog.png" alt="Add View" width="597" />

            <p>
                When you click "Add", Visual Studio will generate the HTML for you for the Contact page. This is NOT a dynamic web page, however.
                This is simply a one-time setup step that Visual Studio is helping you out with. This feature is called "scaffolding". 
                The term "scaffolding" is used to denote that you are free to change or remove anything you'd like. This code is just to get you started.
            </p>
        </div>
    </section>
</article>

@section scripts {
<script>
    $(function () {
        $("article").accordion({
            header: "h3",
            heightStyle: "content",
            collapsible: true,
            active: false
        });
    });
</script>
<script>
    SyntaxHighlighter.config.tagName = "code";
    SyntaxHighlighter.defaults["toolbar"] = false;
    SyntaxHighlighter.all();
</script>

}